{"version":3,"file":"main.js","mappings":"0OAAA,kCAEA,uCAGA,IAAaA,cAAb,MAAaA,cACXC,YAA6BC,YAAA,KAAAA,WAAAA,WAG7BC,UACE,OAAOC,KAAKF,WAAWC,aADzB,wBADC,WAAAE,Q,yLAHUL,eAAa,wBADzB,WAAAM,e,2CAEoD,mB,QAAA,IAAV,cAAAC,YAAA,cAAAA,YAAU,aADxCP,eAAA,QAAAA,cAAAA,e,mLCLb,kCAEA,0CACA,uCAOA,IAAaQ,UAAb,MAAaA,YAAAA,WAAS,wBALrB,WAAAC,QAAO,CACNC,QAAS,GACTC,YAAa,CAAC,iBAAAX,eACdY,UAAW,CAAC,cAAAL,eAEDC,WAAA,QAAAA,UAAAA,W,oLCVb,kCAGA,IAAaD,WAAb,MAAaA,WACXJ,UACE,MAAO,CAAEU,QAAS,qBAFTN,YAAU,wBADtB,WAAAO,eACYP,YAAA,QAAAA,WAAAA,Y,0HCHA,QAAAQ,YAAc,CACzBC,YAAY,I,aCDdC,OAAOC,QAAUC,QAAQ,mB,aCAzBF,OAAOC,QAAUC,QAAQ,iB,aCAzBF,OAAOC,QAAUC,QAAQ,WCCrBC,yBAA2B,GAG/B,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBE,IAAjBD,aACH,OAAOA,aAAaL,QAGrB,IAAID,OAASG,yBAAyBE,UAAY,CAGjDJ,QAAS,IAOV,OAHAO,oBAAoBH,UAAUL,OAAQA,OAAOC,QAASG,qBAG/CJ,OAAOC,Q,+JChBf,kCACA,gCAEA,sCACA,uCAEMQ,UAAY,CAAC,wBAAyB,gCAE5C,Y,qDACE,MAAMC,UAAY,OAAAC,YAAYC,OAAO,aAAArB,WACrCmB,IAAIG,WAAW,CACbC,OAAQ,SAAUA,OAAQC,UACnB,cAAAjB,YAAYC,aAA6C,IAA/BU,UAAUO,QAAQF,SAI/CG,QAAQC,IAAI,oBAAqBJ,QACjCC,SAAS,IAAII,MAAM,0BAJnBF,QAAQC,IAAI,oBAAqBJ,QACjCC,SAAS,MAAM,KAMnBK,eACE,0EACFC,QAAS,qCACTC,aAAa,IAGfZ,IAAIa,gBADiB,OAErB,MAAMC,KAAOC,QAAQC,IAAIC,MAAQ,WAC3BjB,IAAIkB,OAAOJ,MACjB,SAAAK,OAAOX,IACL,kDAAkDM,eAItDM,I","sources":["webpack://monorepo/./apps/api/src/app/app.controller.ts","webpack://monorepo/./apps/api/src/app/app.module.ts","webpack://monorepo/./apps/api/src/app/app.service.ts","webpack://monorepo/./apps/api/src/environments/environment.prod.ts","webpack://monorepo/external commonjs \"@nestjs/common\"","webpack://monorepo/external commonjs \"@nestjs/core\"","webpack://monorepo/external commonjs \"tslib\"","webpack://monorepo/webpack/bootstrap","webpack://monorepo/./apps/api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello from API!' };\n  }\n}\n","export const environment = {\n  production: true,\n};\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from '../src/environments/environment';\n\nconst whitelist = ['http://localhost:4200', 'https://monorepo-ex.web.app'];\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors({\n    origin: function (origin, callback) {\n      if (!environment.production || whitelist.indexOf(origin) !== -1) {\n        console.log('allowed cors for:', origin);\n        callback(null, true);\n      } else {\n        console.log('blocked cors for:', origin);\n        callback(new Error('Not allowed by CORS'));\n      }\n    },\n    allowedHeaders:\n      'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept, Observe',\n    methods: 'GET,PUT,POST,DELETE,UPDATE,OPTIONS',\n    credentials: true,\n  });\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","constructor","appService","getData","this","Get","Controller","AppService","AppModule","Module","imports","controllers","providers","message","Injectable","environment","production","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","whitelist","app","NestFactory","create","enableCors","origin","callback","indexOf","console","log","Error","allowedHeaders","methods","credentials","setGlobalPrefix","port","process","env","PORT","listen","Logger","bootstrap"],"sourceRoot":""}